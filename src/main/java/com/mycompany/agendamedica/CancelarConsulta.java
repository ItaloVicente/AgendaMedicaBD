/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.agendamedica;

import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.dao.ConsultaDAO;
import model.dao.MedicoDAO;
import model.dao.PacienteDAO;

/**
 *
 * @author super
 */
public class CancelarConsulta extends javax.swing.JFrame {

    /**
     * Creates new form CancelarConsulta
     */
    public CancelarConsulta() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        boxHorario = new javax.swing.JComboBox<>();
        nMedicoTxt = new javax.swing.JTextField();
        nPacienteTxt = new javax.swing.JTextField();
        dataTxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SISTEMA DE CANCELAMENTO DE CONSULTAS");
        setMinimumSize(new java.awt.Dimension(717, 508));
        setResizable(false);
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel1.setText("CANCELAMENTO DE CONSULTAS");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(230, 10, 264, 57);

        jLabel2.setText("Nome Medico:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(50, 190, 130, 16);

        jLabel3.setText("Nome Paciente:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(50, 240, 84, 16);

        jLabel4.setText("Data Consulta(formato dd-mm-aaaa):");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(50, 290, 201, 16);

        jLabel5.setText("Horario:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(50, 340, 118, 16);

        boxHorario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00", "09:00", "10:00", "11:00" }));
        getContentPane().add(boxHorario);
        boxHorario.setBounds(140, 340, 117, 22);
        getContentPane().add(nMedicoTxt);
        nMedicoTxt.setBounds(180, 190, 240, 22);
        getContentPane().add(nPacienteTxt);
        nPacienteTxt.setBounds(180, 240, 240, 22);
        getContentPane().add(dataTxt);
        dataTxt.setBounds(320, 290, 93, 22);

        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(50, 410, 72, 23);

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(540, 410, 76, 23);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/blackkk.png"))); // NOI18N
        getContentPane().add(jLabel6);
        jLabel6.setBounds(0, -20, 980, 770);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        PosLogin frame = new PosLogin();
        frame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            boolean verificador = false;
            Medico medicoLogin = Cadastro.getMedico();
            Paciente pacienteLogin = Cadastro.getPaciente();
            // TODO add your handling code here:
            if(medicoLogin!=null&&pacienteLogin==null){
            if(medicoLogin.getNome().equals(nMedicoTxt.getText().toUpperCase())){
            String data = dataTxt.getText();
            Date dataBox;
            SimpleDateFormat formatoOriginalBox = new SimpleDateFormat("dd-MM-yyyy");
            SimpleDateFormat formatoDesejadoBox = new SimpleDateFormat("yyyy-MM-dd");
            dataBox = formatoOriginalBox.parse(data);
            String dataFormatadaBox = formatoDesejadoBox.format(dataBox);
            String hora = (String) boxHorario.getSelectedItem();
            ConsultaDAO daoc = new ConsultaDAO();
            MedicoDAO daom = new MedicoDAO();
            PacienteDAO daop = new PacienteDAO();
            String[] vetorData = data.split("(?!^)");
            ArrayList<Consulta> consultas = daoc.getTodasConsultaDataHora(dataFormatadaBox, hora);
            if(consultas!=null){
            if(vetorData.length!=10){
                JOptionPane.showMessageDialog(null, "Olá, data inserida inválida.");
            }
            else{
                for(Consulta consulta: consultas){
                Medico medico = daom.returnMedico(consulta.getIdMedico());
                Paciente paciente = daop.returnPaciente(consulta.getIdPaciente());
                Date dataObj;
                SimpleDateFormat formatoOriginal = new SimpleDateFormat("yyyy-MM-dd");
                SimpleDateFormat formatoDesejado = new SimpleDateFormat("dd-MM-yyyy");
                dataObj = formatoOriginal.parse(consulta.getData());
                String dataFormatada = formatoDesejado.format(dataObj);
                String timeWithSeconds = consulta.getHorario();  // Exemplo de hora no formato HH:mm:ss
                LocalTime time = LocalTime.parse(timeWithSeconds);  // Converter String para LocalTime

                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");  // Criar formatter para o formato desejado
                String timeWithoutSeconds = time.format(formatter);  // Converter LocalTime para String no novo formato
                if(medico.getNome().equals(nMedicoTxt.getText().toUpperCase())&&dataFormatada.equals(dataTxt.getText())&&timeWithoutSeconds.equals(boxHorario.getSelectedItem())){
                    daoc.delete(consulta);
                    verificador =true;
                }
                }
            }
            }else{
                JOptionPane.showMessageDialog(null, "Olá, médico, paciente, data, ou horario não encontrados, por favor, gere um relatorio.");
            }
            }
            }
            else if(pacienteLogin!=null&&medicoLogin==null){
                if(pacienteLogin.getNome().equals(nPacienteTxt.getText().toUpperCase())){
                String data = dataTxt.getText();
                Date dataBox;
                SimpleDateFormat formatoOriginalBox = new SimpleDateFormat("dd-MM-yyyy");
                SimpleDateFormat formatoDesejadoBox = new SimpleDateFormat("yyyy-MM-dd");
                dataBox = formatoOriginalBox.parse(data);
                String dataFormatadaBox = formatoDesejadoBox.format(dataBox);
                String hora = (String) boxHorario.getSelectedItem();
                ConsultaDAO daoc = new ConsultaDAO();
                MedicoDAO daom = new MedicoDAO();
                PacienteDAO daop = new PacienteDAO();
                String[] vetorData = data.split("(?!^)");
                ArrayList<Consulta> consultasCancelar = daoc.getTodasConsultaDataHora(dataFormatadaBox, hora);
                if(consultasCancelar!=null){
                for(Consulta consultaCancelar : consultasCancelar){
                    Medico medico = daom.returnMedico(consultaCancelar.getIdMedico());
                    Paciente paciente = daop.returnPaciente(consultaCancelar.getIdPaciente());
                    Date dataObj;
                    SimpleDateFormat formatoOriginal = new SimpleDateFormat("yyyy-MM-dd");
                    SimpleDateFormat formatoDesejado = new SimpleDateFormat("dd-MM-yyyy");
                    dataObj = formatoOriginal.parse(consultaCancelar.getData());
                    String dataFormatada = formatoDesejado.format(dataObj);
                    String timeWithSeconds = consultaCancelar.getHorario();  // Exemplo de hora no formato HH:mm:ss
                    LocalTime time = LocalTime.parse(timeWithSeconds);  // Converter String para LocalTime

                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");  // Criar formatter para o formato desejado
                    String timeWithoutSeconds = time.format(formatter);  // Converter LocalTime para String no novo formato
                    if(medico.getNome().equals(nMedicoTxt.getText().toUpperCase())&&paciente.getNome().equals(nPacienteTxt.getText().toUpperCase())&&dataFormatada.equals(dataTxt.getText())&&timeWithoutSeconds.equals(boxHorario.getSelectedItem())){
                        daoc.delete(consultaCancelar);
                        verificador = true;
                }
                }
                }else{
                    JOptionPane.showMessageDialog(null, "Olá, médico, paciente, data, ou horario não encontrados, por favor, gere um relatorio.");
                }
                if(vetorData.length!=10){
                        JOptionPane.showMessageDialog(null, "Olá, data inserida inválida.");
                        }
                ArrayList<Consulta> consultas = daoc.getConsultaListaEspera(dataFormatadaBox, hora);
                if(consultas!=null){
                    int contador = 0;
                    boolean verificador1=false;
                    for(Consulta consulta: consultas){
                                Medico medico = daom.returnMedico(consulta.getIdMedico());
                                Paciente paciente = daop.returnPaciente(consulta.getIdPaciente());
                                Date dataObj;
                                SimpleDateFormat formatoOriginal = new SimpleDateFormat("yyyy-MM-dd");
                                SimpleDateFormat formatoDesejado = new SimpleDateFormat("dd-MM-yyyy");
                                dataObj = formatoOriginal.parse(consulta.getData());
                                String dataFormatada = formatoDesejado.format(dataObj);
                                String timeWithSeconds = consulta.getHorario();  // Exemplo de hora no formato HH:mm:ss
                                LocalTime time = LocalTime.parse(timeWithSeconds);  // Converter String para LocalTime
                                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");  // Criar formatter para o formato desejado
                                String timeWithoutSeconds = time.format(formatter);  // Converter LocalTime para String no novo formato
                                int prioridade = Integer.parseInt(consulta.getDescricao());
                                if(contador==prioridade){
                                    if(medico.getNome().equals(nMedicoTxt.getText().toUpperCase())&&verificador1==false&&
                                            dataFormatada.equals(dataTxt.getText())&&
                                            timeWithoutSeconds.equals(boxHorario.getSelectedItem())){
                                        consulta.setDescricao("");
                                        consulta.setStatus("marcada");
                                        daoc.update(consulta);
                                        verificador1=true;
                                        verificador = true;
                                    }
                                }else{
                                      contador=prioridade;
                                      if(contador==prioridade){
                                        if(medico.getNome().equals(nMedicoTxt.getText().toUpperCase())&&verificador1==false&&
                                            dataFormatada.equals(dataTxt.getText())&&
                                            timeWithoutSeconds.equals(boxHorario.getSelectedItem())){
                                            consulta.setDescricao("");
                                            consulta.setStatus("marcada");
                                            daoc.update(consulta);
                                            verificador1=true;
                                            verificador = true;
                                    }
                                }
                                    }
                            }
                }
            }
            }
            if(verificador==false){
                JOptionPane.showMessageDialog(null, "Olá, médico, paciente, data, ou horario não encontrados ou inseridos de maneira incorreta, por favor, gere um relatorio.");
            }
        } catch (ParseException ex) {
            Logger.getLogger(CancelarConsulta.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Olá, médico, paciente, data, ou horario não encontrados, por favor, gere um relatorio.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CancelarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CancelarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CancelarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CancelarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CancelarConsulta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> boxHorario;
    private javax.swing.JTextField dataTxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField nMedicoTxt;
    private javax.swing.JTextField nPacienteTxt;
    // End of variables declaration//GEN-END:variables
}
