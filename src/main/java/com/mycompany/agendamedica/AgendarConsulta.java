/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


package com.mycompany.agendamedica;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.dao.ConsultaDAO;
import model.dao.MedicoDAO;

/**
 *
 * @author super
 */
public class AgendarConsulta extends javax.swing.JFrame {

    /**
     * Creates new form AgendarConsulta
     */
    public AgendarConsulta() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtConsultas = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        pesquisaTxt = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        chxHora = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SISTEMA DE AGENDAMENTO DE CONSULTAS");
        setMinimumSize(new java.awt.Dimension(881, 630));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel1.setText("SISTEMA DE AGENDAMENTO DE CONSULTAS");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(350, 10, 366, 70);

        jtConsultas = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex,int colIndex){
                return false;
            }
        };
        jtConsultas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Medico", "Especialidade", "Avaliacao", "Id_medico"
            }
        ));
        jtConsultas.getTableHeader().setResizingAllowed(false);
        jtConsultas.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jtConsultas);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(50, 200, 752, 296);

        jLabel2.setText("Pesquise por Nome ou Especialidade:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(180, 80, 270, 16);
        getContentPane().add(pesquisaTxt);
        pesquisaTxt.setBounds(470, 80, 202, 22);

        jButton1.setText("Pesquisar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(740, 70, 120, 23);

        jButton2.setText("Agendar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(160, 510, 110, 23);

        jButton3.setText("Voltar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(590, 510, 72, 23);

        jLabel3.setText("Digite a data que deseja agendar: (formato dd-mm-aaaa)");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(180, 110, 380, 16);

        jLabel4.setText("Escolha a hora:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(180, 140, 190, 16);

        chxHora.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "08:00:00", "09:00:00", "10:00:00", "11:00:00" }));
        getContentPane().add(chxHora);
        chxHora.setBounds(560, 140, 114, 22);

        jButton4.setText("Finalizar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(370, 510, 100, 23);

        jDateChooser1.setDateFormatString("yyyy-MM-dd");
        getContentPane().add(jDateChooser1);
        jDateChooser1.setBounds(560, 110, 103, 22);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mycompany/blackkk.png"))); // NOI18N
        jLabel5.setMaximumSize(new java.awt.Dimension(1077, 756));
        jLabel5.setMinimumSize(new java.awt.Dimension(1077, 756));
        getContentPane().add(jLabel5);
        jLabel5.setBounds(0, -70, 1000, 880);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        MedicoDAO daom = new MedicoDAO();
        ArrayList<Medico> medicos = daom.readAtivos();
        for(Medico medico: medicos){
            DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
            Object[] dados = {medico.getNome(),medico.getEspecialidade(),medico.calcularMedia(),medico.getId()};
            dtmConsultas.addRow(dados);
        }
    }//GEN-LAST:event_formWindowOpened

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        PosLogin frame = new PosLogin();
        frame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel table = (DefaultTableModel) jtConsultas.getModel();
        int index5 = table.getRowCount();
        MedicoDAO daom = new MedicoDAO();
        ArrayList<Medico> medicos = daom.read(pesquisaTxt.getText());
        for(int x=0;x<index5;x++){
            table.removeRow(0);
        }
        for(Medico medico: medicos){
            DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
            Object[] dados = {medico.getNome(),medico.getEspecialidade(),medico.calcularMedia(),medico.getId()};
            dtmConsultas.addRow(dados);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int row = jtConsultas.getSelectedRow();
        if(row==-1){
            JOptionPane.showMessageDialog(null, "Selecione uma linha!");
        }
        else{
        try {
            // TODO add your handling code here:
            Paciente paciente = Cadastro.getPaciente();
            MedicoDAO daom = new MedicoDAO();
            ConsultaDAO daoc = new ConsultaDAO();
            DefaultTableModel dtmConsultas = (DefaultTableModel) jtConsultas.getModel();
            String hora = (String) chxHora.getSelectedItem();
            String nomeMedico = (String) dtmConsultas.getValueAt(row, 0);
            String especialidadeMedico= (String) dtmConsultas.getValueAt(row, 1);
            int id_medico = (Integer) dtmConsultas.getValueAt(row, 3);
            String data;
            boolean verificadorData = false;
            if(jDateChooser1.getDate() == null){
                JOptionPane.showMessageDialog(null, "Olá, datas inseridas inválidas!");
                verificadorData=true;
            }
            else{
            Date dataBox;
            SimpleDateFormat formatoOriginalBox = new SimpleDateFormat("dd-MM-yyyy");
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            data = dateFormat.format(jDateChooser1.getDate());
            boolean verificadorMesmoDia = false;

               ArrayList<Consulta> consultasPaciente = paciente.getConsultas();
            ArrayList<Consulta> consultasListaEsperaPaciente = paciente.getListaEspera();
            for(Consulta consultaPaciente : consultasPaciente){
                if(consultaPaciente.getData().equals(data)&&consultaPaciente.getHorario().equals(hora)){
                   verificadorMesmoDia = true;
                   break;
                }
            }
            for(Consulta consultaPacienteEspera : consultasListaEsperaPaciente){
                if(consultaPacienteEspera.getData().equals(data)&&consultaPacienteEspera.getHorario().equals(hora)){
                   verificadorMesmoDia = true;
                   break;
                }
            }
            paciente.resetConsultas();
            if(verificadorMesmoDia == false && verificadorData==false){
                boolean verificador=false;
                boolean verificador2=false;
                Medico medico = daom.returnMedico(id_medico);
                if(medico!=null&&paciente!=null){
                    if(medico.getNome().equals(nomeMedico)&&medico.getEspecialidade().equals(especialidadeMedico)){
                        ArrayList<Consulta> consultas = medico.getConsultas();
                        ArrayList<Consulta> consultasMesmoDia = new ArrayList<>();
                        ArrayList<Consulta> consultasNovoDia = new ArrayList<>();
                        for(Consulta consulta: consultas){
                            if(data.equals(consulta.getData())){
                                consultasMesmoDia.add(consulta);
                            }
                        }
                        if(consultasMesmoDia.size()>=4){
                            String respostas = JOptionPane.showInputDialog("Esse médico já possui 4 consultas no mesmo dia, deseja entrar na lista de espera? Y/N").toUpperCase();
                            if(respostas.equals("Y")){
                                ArrayList<Consulta> listaEsperaMedico = medico.getListaEspera();
                                Consulta consulta = new Consulta(medico.getId(),paciente.getId(),data,hora,"espera");
                                int prioridade = 0;
                                for(Consulta lista : listaEsperaMedico){
                                    if(lista.getData().equals(data)&&lista.getHorario().equals(hora)){
                                        prioridade = Integer.parseInt(lista.getDescricao())+1;
                                    }
                                }
                                consulta.setDescricao(Integer.toString(prioridade));
                                daoc.create(consulta);
                                JOptionPane.showMessageDialog(null, "Voce entrou para lista de espera");
                                medico.resetListaEspera();
                            }
                            if(respostas.equals("N")){
                                String respostas2 = JOptionPane.showInputDialog("Deseja marcar a consulta para outro dia? Y/N").toUpperCase();
                                if(respostas2.equals("Y")){
                                    String dataNova = JOptionPane.showInputDialog("Digite a data (formato dd-mm-aaaa)");
                                    dataBox = formatoOriginalBox.parse(dataNova);
                                    dataNova = dateFormat.format(dataBox);
                                    for(Consulta consulta2: consultas){
                                        if(consulta2.getData().equals(dataNova)){
                                            consultasNovoDia.add(consulta2);
                                        }
                                    }
                                    if(consultasNovoDia.size()>=4){
                                        JOptionPane.showMessageDialog(null, "Olá, infelizmente o médico também está com a agenda lotada nesse dia.","ERRO", JOptionPane.ERROR_MESSAGE);
                                    }
                                    else{
                                        for(Consulta consulta1 : consultasNovoDia){
                                            if(consulta1.getHorario().equals(hora)){
                                                verificador = true;
                                            }
                                        }
                                        if(verificador == false){
                                        Consulta consultaNovoDia = new Consulta(medico.getId(),paciente.getId(),dataNova,hora,"marcada");
                                        daoc.create(consultaNovoDia);
                                        JOptionPane.showMessageDialog(null, "O agendamento foi marcado com sucesso!");
                                        }else{
                                            JOptionPane.showMessageDialog(null, "Olá, infelizmente o médico também está com horario marcado nesse dia,mas possui outros horarios livres nesse dia, se quiser altere a hora.","ERRO", JOptionPane.ERROR_MESSAGE);
                                        }
 
                                    }
                                }else if(respostas2.equals("N")){
                                    JOptionPane.showMessageDialog(null, "Ok, obrigado por usar nosso sistema!");
                                }
                            }
                        }
                        else{
                            int tamanho = consultas.size();
                            if(tamanho==0){
                                Consulta consulta = new Consulta(medico.getId(),paciente.getId(),data,hora,"marcada");
                                daoc.create(consulta);
                                JOptionPane.showMessageDialog(null, "O agendamento foi marcado com sucesso!");
                                
                            }else{
                                for(int x =0;x<consultas.size();x++){
                                Consulta consulta4 = consultas.get(x);

                                if(consulta4.getData().equals(data)&&consulta4.getHorario().equals(hora)){
                                    verificador2=true;
                                    JOptionPane.showMessageDialog(null, "Olá, infelizmente o médico está com uma consulta nesse horario, mas ainda possui horarios vagos nesse dia, se quiser altere a hora.","ERRO", JOptionPane.ERROR_MESSAGE);
                                    break;
                                }
                                }
                                if(verificador2==false){
                                    Consulta consulta = new Consulta(medico.getId(),paciente.getId(),data,hora,"marcada");
                                    daoc.create(consulta);
                                    JOptionPane.showMessageDialog(null, "O agendamento foi marcado com sucesso!");
                                }
                                
                            }
                        }
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Ocorreu algum erro ao resgatar o paciente ou medico!");
                }
            }else{
                JOptionPane.showMessageDialog(null, "Voce ja possui uma consulta marcada ou na espera para esse dia");
            }
            }
            
        } catch (ParseException ex) {
            Logger.getLogger(AgendarConsulta.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        JOptionPane.showMessageDialog(null, "Operacao finalizada");
        Cadastro frame = new Cadastro();
        Cadastro.setMedico(null);
        Cadastro.setPaciente(null);
        frame.setVisible(true);
        this.dispose();
        
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AgendarConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AgendarConsulta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> chxHora;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtConsultas;
    private javax.swing.JTextField pesquisaTxt;
    // End of variables declaration//GEN-END:variables
}
